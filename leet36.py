class Solution:
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        import numpy as np
        board = np.array(board)
        for i in range(9):
            for j in range(9):
                now = board[i][j]
                if now != '.':
                    a = board[i]
                    a1 = a.tolist().count(now)
                    if a1>1: return False
                    b = board[...,j]
                    b1 = b.tolist().count(now)
                    if b1>1: return False
                    c = board[(i // 3) * 3:(i // 3) * 3 + 3,(j // 3) * 3:(j // 3) * 3 + 3].flatten()
                    d = c.tolist()
                    c1 = d.count(now)
                    if c1>1: return False

        return True

so = Solution()
print(so.isValidSudoku([[".",".",".",".","5",".",".","1","."],[".","4",".","3",".",".",".",".","."],[".",".",".",".",".","3",".",".","1"],["8",".",".",".",".",".",".","2","."],[".",".","2",".","7",".",".",".","."],[".","1","5",".",".",".",".",".","."],[".",".",".",".",".","2",".",".","."],[".","2",".","9",".",".",".",".","."],[".",".","4",".",".",".",".",".","."]]))

# [[".",".",".",".","5",".",".","1","."],
#  [".","4",".","3",".",".",".",".","."],
#  [".",".",".",".",".","3",".",".","1"],
#  ["8",".",".",".",".",".",".","2","."],
#  [".",".","2",".","7",".",".",".","."],
#  [".","1","5",".",".",".",".",".","."],
#  [".",".",".",".",".","2",".",".","."],
#  [".","2",".","9",".",".",".",".","."],
#  [".",".","4",".",".",".",".",".","."]]
